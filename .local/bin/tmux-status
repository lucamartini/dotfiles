#!/bin/bash
#    ██
#   ░██
#  ██████ ██████████  ██   ██ ██   ██
# ░░░██░ ░░██░░██░░██░██  ░██░░██ ██
#   ░██   ░██ ░██ ░██░██  ░██ ░░███
#   ░██   ░██ ░██ ░██░██  ░██  ██░██
#   ░░██  ███ ░██ ░██░░██████ ██ ░░██
#    ░░  ░░░  ░░  ░░  ░░░░░░ ░░   ░░
#
#  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
# ░▓ author       ▓ luca
# ░▓ adapted from ▓ https://code.x-e.ro/dotfiles
# ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
# ░░░░░░░░░░░░░░░░
#
#----------------------------------------------------------// vars
FULL=━
EMPTY=┄
C0="#282a36"
C1="#222222"
C2="#8FBCBB"
C3="#B3291C"
C4="#ffb86c"
C5="#282a36"
C6="#44475a"
C7="#8be9fd"

# Dracula Color Pallette
white='#f8f8f2'
gray='#44475a'
dark_gray='#282a36'
light_purple='#bd93f9'
dark_purple='#6272a4'
cyan='#8be9fd'
green='#50fa7b'
orange='#ffb86c'
red='#ff5555'
pink='#ff79c6'
yellow='#f1fa8c'
NETWORK_NAME=en0
#--------------------------------------------------// progress bar
draw() {
  perc=$1
  size=$2
  inc=$((perc * size / 125))
  out=
  for v in $(seq 0 $((size - 1))); do
    [[ "$v" -le "$inc" ]] &&
      out="${out}#[fg=$C1]${FULL}" ||
      out="${out}#[fg=$C6]${EMPTY}"
  done
  printf "%s" "$out"
}
#-----------------------------------------------------// RAM
get_RAM() {
  case $(uname -s) in
  Linux)
    usage="$(free -h | awk 'NR==2 {print $3}')"
    total="$(free -h | awk 'NR==2 {print $2}')"
    formatted="${usage}/${total}"

    echo "${formatted//i/B}"
    ;;

  Darwin)
    # Get used memory blocks with vm_stat, multiply by page size to get size in bytes, then convert to GB
    hw_pagesize="$(pagesize)"
    anonymous_pages="$(vm_stat | grep 'Anonymous pages' | sed 's/[^0-9]//g')"
    pages_purgeable="$(vm_stat | grep 'Pages purgeable' | sed 's/[^0-9]//g')"
    pages_wired_down="$(vm_stat | grep 'Pages wired down' | sed 's/[^0-9]//g')"
    pages_occupied_by_compressor="$(vm_stat | grep 'Pages occupied by compressor' | sed 's/[^0-9]//g')"
    app_pages="$((anonymous_pages - pages_purgeable))"
    used_pages=$((app_pages + pages_wired_down + pages_occupied_by_compressor))
    used_mem=$((used_pages * hw_pagesize))
    total_mem="$(sysctl -n hw.memsize)"
    total_mem_GB="$((total_mem / 1073741824))"
    used_mem_GB="$((used_mem / 1073741824))"
    ratio=$((used_mem_GB * 100 / total_mem_GB))
    echo "${used_mem_GB}GB/${total_mem_GB}GB $(draw $ratio 10)"
    ;;
  esac
}
# normalize the percentage string to always have a length of 5
normalize_percent_len() {
  # the max length that the percent can reach, which happens for a two digit number with a decimal house: "99.9%"
  max_len=5
  percent_len=${#1}+1
  diff_len=$((max_len - percent_len))
  # if the diff_len is even, left will have 1 more space than right
  left_spaces=$(((diff_len + 1) / 2))
  right_spaces=$((diff_len / 2))
  printf "%${left_spaces}s%s%${right_spaces}s" "" "$1%" "" "$(draw "$1" 10)"
}
#-----------------------------------------------------// CPU
get_CPU() {
  case $(uname -s) in
  Linux)
    percent=$(LC_NUMERIC=en_US.UTF-8 top -bn2 -d 0.01 | grep "Cpu(s)" | tail -1 | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')
    normalize_percent_len "$percent"
    ;;

  Darwin)
    cpuvalue=$(ps -A -o %cpu | awk -F. '{s+=$1} END {print s}')
    cpucores=$(sysctl -n hw.logicalcpu)
    cpuusage=$((cpuvalue / cpucores))
    normalize_percent_len $cpuusage
    ;;
  esac
}
#------------------------------------------------------// network
get_tmux_option() {
  local option_name="$1"
  local default_value="$2"
  local option_value
  option_value="$(tmux show-option -gqv "$option_name")"

  if [ -z "$option_value" ]; then
    echo -n "$default_value"
  else
    echo -n "$option_value"
  fi
}

set_tmux_option() {
  local option_name="$1"
  local option_value="$2"
  tmux set-option -gq "$option_name" "$option_value"
}

download_bytes() {
  case $(uname -s) in
  Linux)
    cat "/sys/class/net/$NETWORK_NAME/statistics/rx_bytes"
    ;;
  Darwin)
    netstat -I "$NETWORK_NAME" -b | tail -n 1 | awk '{print $7}'
    ;;
  esac
}

upload_bytes() {
  case $(uname -s) in
  Linux)
    cat "/sys/class/net/$NETWORK_NAME/statistics/rx_bytes"
    ;;
  Darwin)
    netstat -I "$NETWORK_NAME" -b | tail -n 1 | awk '{print $10}'
    ;;
  esac
}
get_network() {
  previous_download_b=$(get_tmux_option "@prev-down-b" 0)
  current_download_b=$(download_bytes)
  previous_upload_b=$(get_tmux_option "@prev-up-b" 0)
  current_upload_b=$(upload_bytes)

  interval=$(get_tmux_option status-interval)

  delta_download_b=$((current_download_b - previous_download_b))
  download_bps=$((delta_download_b / interval))
  delta_upload_b=$((current_upload_b - previous_upload_b))
  upload_bps=$((delta_upload_b / interval))

  download_kbps=$(echo "scale=0; $download_bps/1024" | bc)
  upload_kbps=$(echo "scale=0; $upload_bps/1024" | bc)

  printf "%6s kB/s ↓ • %6s kB/s ↑" "$download_kbps" "$upload_kbps"
  set_tmux_option "@prev-down-b" "$current_download_b"
  set_tmux_option "@prev-up-b" "$current_upload_b"

}
#-------------------------------------------------------// compute
FRONT="#[bg=$C7]#[fg=0]▓▒░"
RAM=$(get_RAM)
CPU=$(get_CPU)
SYS=$({
  printf "#[fg=%s]CPU %s " "$C0" "${CPU}"
  printf "#[fg=%s]RAM %s " "$C0" "${RAM}"
})
NETWORK=$(get_network)
TIME=$({
  printf "#[bg=%s]#[fg=%s]░▒#[bg=%s]#[fg=%s]▓\
		#[fg=%s]#[bg=%s] %s #[fg=%s]%s#[fg=%s]%s #[bg=0]#[fg=%s]▒░" \
    "$C7" "$C4" "$C7" "$C4" "$C5" "$C4" \
    "$(date +'%H:%M')" "$C5" "$(date +'%d/')" \
    "$C6" "$(date +'%m/%Y')" "$C4"
})
#--------------------------------------------------------// render
printf "%s %s %s %s" "$FRONT" "$SYS" "$NETWORK" "$TIME"
