#!/usr/bin/env bash
#    ██
#   ░██
#  ██████ ██████████  ██   ██ ██   ██
# ░░░██░ ░░██░░██░░██░██  ░██░░██ ██
#   ░██   ░██ ░██ ░██░██  ░██ ░░███
#   ░██   ░██ ░██ ░██░██  ░██  ██░██
#   ░░██  ███ ░██ ░██░░██████ ██ ░░██
#    ░░  ░░░  ░░  ░░  ░░░░░░ ░░   ░░
#
#  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
# ░▓ author       ▓ luca
# ░▓ adapted from ▓ https://code.x-e.ro/dotfiles
# ░▓ reviewed by  ▓ chatgpt
# ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
# ░░░░░░░░░░░░░░░░
#
#----------------------------------------------------------// CONFIG
FULL=━
EMPTY=┄
Black=0
Red=1
Green=2
Yellow=3
Blue=4
Magenta=5
Cyan=6
White=7

NETWORK_NAME=en0
OS="$(uname -s)"

#--------------------------------------------------// PROGRESS BAR
draw() {
  local perc="$1"
  local size="$2"
  local inc=$((perc * size / 125))
  local out=""
  for ((v = 0; v < size; v++)); do
    if ((v <= inc)); then
      out+="#[fg=$Black]$FULL"
    else
      out+="#[fg=$Black]$EMPTY"
    fi
  done
  printf "%s" "$out"
}

#-----------------------------------------------------// RAM USAGE
get_RAM() {
  case $OS in
  Linux)
    usage="$(free -h | awk 'NR==2 {print $3}')"
    total="$(free -h | awk 'NR==2 {print $2}')"
    formatted="${usage}/${total}"

    echo "${formatted//i/B}"
    ;;

  Darwin)
    # Get used memory blocks with vm_stat, multiply by page size to get size in bytes, then convert to GB
    hw_pagesize="$(pagesize)"
    anonymous_pages="$(vm_stat | grep 'Anonymous pages' | sed 's/[^0-9]//g')"
    pages_purgeable="$(vm_stat | grep 'Pages purgeable' | sed 's/[^0-9]//g')"
    pages_wired_down="$(vm_stat | grep 'Pages wired down' | sed 's/[^0-9]//g')"
    pages_occupied_by_compressor="$(vm_stat | grep 'Pages occupied by compressor' | sed 's/[^0-9]//g')"
    app_pages="$((anonymous_pages - pages_purgeable))"
    used_pages=$((app_pages + pages_wired_down + pages_occupied_by_compressor))
    used_mem=$((used_pages * hw_pagesize))
    total_mem="$(sysctl -n hw.memsize)"
    total_mem_GB="$((total_mem / 1073741824))"
    used_mem_GB="$((used_mem / 1073741824))"
    ratio=$((used_mem_GB * 100 / total_mem_GB))
    echo "${used_mem_GB}GB/${total_mem_GB}GB $(draw $ratio 10)"
    ;;
  esac
}

#-----------------------------------------------------// CPU USAGE
normalize_percent_len() {
  # the max length that the percent can reach, which happens for a two digit number with a decimal house: "99.9%"
  max_len=5
  percent_len=${#1}+1
  diff_len=$((max_len - percent_len))
  # if the diff_len is even, left will have 1 more space than right
  left_spaces=$(((diff_len + 1) / 2))
  right_spaces=$((diff_len / 2))
  printf "%${left_spaces}s%s%${right_spaces}s" "" "$1%" "" "$(draw "$1" 10)"
}

get_CPU() {
  case $OS in
  Linux)
    percent=$(LC_NUMERIC=en_US.UTF-8 top -bn2 -d 0.01 | grep "Cpu(s)" | tail -1 | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')
    normalize_percent_len "$percent"
    ;;

  Darwin)
    cpuvalue=$(ps -A -o %cpu | awk -F. '{s+=$1} END {print s}')
    cpucores=$(sysctl -n hw.logicalcpu)
    cpuusage=$((cpuvalue / cpucores))
    normalize_percent_len $cpuusage
    ;;
  esac
}
#------------------------------------------------------// NETWORK
get_tmux_option() {
  tmux show-option -gqv "$1" || echo "$2"
}

set_tmux_option() {
  tmux set-option -gq "$1" "$2"
}

download_bytes() {
  [[ "$OS" == "Linux" ]] && cat "/sys/class/net/$NETWORK_NAME/statistics/rx_bytes"
  [[ "$OS" == "Darwin" ]] && netstat -I "$NETWORK_NAME" -b | awk 'NR==2 {print $7}'
}

upload_bytes() {
  [[ "$OS" == "Linux" ]] && cat "/sys/class/net/$NETWORK_NAME/statistics/tx_bytes"
  [[ "$OS" == "Darwin" ]] && netstat -I "$NETWORK_NAME" -b | awk 'NR==2 {print $10}'
}

#-------------------------------------------------------// STATUS SEGMENTS
FRONT="#[bg=$Blue]#[fg=$Black]▓▒░"
RAM=$(get_RAM)
CPU=$(get_CPU)
SYS="#[fg=$Black]CPU $CPU #[fg=$Black]RAM $RAM"
TIME="#[bg=$Blue]#[fg=$Green]░▒▓#[fg=$Black]#[bg=$Green] $(date +'%H:%M') $(date +'%d/%m/%Y') #[bg=$Black]#[fg=$Green]▒░"

#--------------------------------------------------------// RENDER
printf "%s %s %s" "$FRONT" "$SYS" "$TIME"
