#!/bin/bash

system_type=$(uname -s)

red=$(tput setaf 1 bold)
green=$(tput setaf 2 bold)
yellow=$(tput setaf 3 bold)
reset=$(tput sgr0)

REPO_DIR=~/zsh
if [ ! -d "$REPO_DIR" ]; then
  mkdir -p "$REPO_DIR"
fi

function clone_or_pull_repos() {
  echo "repo ${green}$1${reset}"
  cd $REPO_DIR || return
  if [ -d "$1" ]; then
    cd "$1" || return
    echo "pulling from $2"
    git pull
  else
    echo "cloning from $2"
    git clone --depth=1 "$2" $REPO_DIR/"$1"
  fi
}

function pull_repos() {
  echo -e "going to ${yellow}$1${reset}"
  cd "$1" || return
  for dir in */; do
    local local_dir=${dir%*/}
    cd "$local_dir" || return
    echo "pulling ${green}$local_dir${reset}"
    git pull
    cd ..
  done
}

if ! command -v zsh >/dev/null 2>&1; then
  echo "${red}zsh shell not installed! Install it and switch to it with:${reset}"
  echo "chsh -s \$(which zsh)"
  echo "${red}and log out and in${reset}"
  exit 1
fi

repos=(
  "dracula-syntax-highlighting:https://github.com/dracula/zsh-syntax-highlighting.git"
  "powerlevel10k:https://github.com/romkatv/powerlevel10k.git"
  "zsh-autosuggestions:https://github.com/zsh-users/zsh-autosuggestions"
  "zsh-syntax-highlighting:https://github.com/zsh-users/zsh-syntax-highlighting.git"
)

for entry in "${repos[@]}"; do
  key="${entry%%:*}"
  value="${entry#*:}"
  clone_or_pull_repos "$key" "$value"
done

# homebrew
if ! command -v brew >/dev/null 2>&1; then
  echo "Installing ${yellow}homebrew${reset}"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
echo "Updating ${green}homebrew bundle${reset}"
if [ "$system_type" = "Darwin" ]; then
  if command -v /opt/homebrew/bin/brew &>/dev/null; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
elif [ "$system_type" = "Linux" ]; then
  if command -v /home/linuxbrew/.linuxbrew/bin/brew &>/dev/null; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
fi
brew bundle install --global --verbose
brew upgrade --greedy

# fonts because no casks
if [ "$system_type" = "Linux" ]; then
  declare -a fonts=(
    FiraCode
  )
  version='2.3.3'
  fonts_dir="${HOME}/.local/share/fonts"
  if [[ ! -d "$fonts_dir" ]]; then
    mkdir -p "$fonts_dir"
  fi
  run_fc_cache=0
  for font in "${fonts[@]}"; do
    bookmark="${fonts_dir}/${font}_${version}.touch"
    if [ ! -f "${bookmark}" ]; then
      zip_file="${font}.zip"
      download_url="https://github.com/ryanoasis/nerd-fonts/releases/download/v${version}/${zip_file}"
      echo "Downloading $download_url"
      wget "$download_url"
      unzip "$zip_file" -d "$fonts_dir"
      rm "$zip_file"
      run_fc_cache=1
      touch "${bookmark}"
    fi
  done
  if [ "$run_fc_cache" = 1 ]; then
    find "$fonts_dir" -name '*Windows Compatible*' -delete
    fc-cache -fv
  fi
fi

# tmux
pull_repos ~/.tmux/plugins

# vim
echo "upgrading ${green}vim${reset}"
nvim --headless "+Lazy! sync" +qa

# set OSX config
if [ "$system_type" = "Darwin" ]; then
  defaults write com.apple.dock autohide-delay -float 0.05
  defaults write NSGlobalDomain "AppleShowAllExtensions" -bool "true"
  defaults write com.apple.finder "AppleShowAllFiles" -bool "True"
  defaults write com.apple.finder "ShowPathbar" -bool "true"
  defaults write com.apple.finder "_FXSortFoldersFirst" -bool "true"
  defaults write -g NSWindowShouldDragOnGesture YES
fi
