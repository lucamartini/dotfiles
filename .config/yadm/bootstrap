#!/bin/bash

system_type=$(uname -s)

red=$(tput setaf 1 bold)
green=$(tput setaf 2 bold)
yellow=$(tput setaf 3 bold)
reset=$(tput sgr0)

function pull_repos() {
  echo -e "going to ${yellow}$1${reset}"
  cd "$1" || return
  for dir in */; do
    local local_dir=${dir%*/}
    cd "$local_dir" || return
    echo "upgrading ${green}$local_dir${reset}"
    git pull
    cd ..
  done
}

if ! command -v zsh >/dev/null 2>&1; then
  echo "${red}zsh shell not installed! Install it and switch to it with:${reset}"
  echo 'chsh -s $(which zsh)'
  echo "${red}and log out and in${reset}"
  exit 1
fi

if [ -f /etc/os-release ]; then
  ID_LIKE=$(grep -oP '(?<=^ID_LIKE=).+' /etc/os-release | tr -d '"')
  if [ "$ID_LIKE" = 'debian' ]; then
    if ! dpkg-query -W -f='${Status}' build-essential | grep "ok installed"; then sudo apt --yes install build-essential; fi
    if [[ $(</etc/default/locale) != "LANG=en_US.UTF-8" ]]; then
      sudo cp ~/misc/debian/locale /etc/default/
      sudo cp ~/misc/debian/locale.gen /etc/
      sudo locale-gen
    fi
    if [ ! -f /etc/apt/sources.list.d/google-chrome.list ]; then
      sudo cp ~/misc/debian/sources.list.d/google-chrome.list /etc/apt/sources.list.d/
    fi
  fi
fi

# oh-my-zsh
if [[ ! -d "$ZSH" ]]; then
  echo "installing ${yellow}oh-my-zsh${reset}"
  git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
  ZSH_CUSTOM=~/.oh-my-zsh/custom
  git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
  git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k
  git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $ZSH_CUSTOM/plugins/fast-syntax-highlighting
else
  pull_repos ~/.oh-my-zsh/custom/plugins
  pull_repos ~/.oh-my-zsh/custom/themes
fi

# homebrew
if ! command -v brew >/dev/null 2>&1; then
  echo "Installing ${yellow}homebrew${reset}"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi
echo "Updating ${green}homebrew bundle${reset}"
if [ "$system_type" = "Darwin" ]; then
  if command -v /opt/homebrew/bin/brew &>/dev/null; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
elif [ "$system_type" = "Linux" ]; then
  if command -v /home/linuxbrew/.linuxbrew/bin/brew &>/dev/null; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  fi
fi
brew bundle install --global --verbose
if [ "$ID_LIKE" = 'debian' ]; then
  brew install gcc
fi
brew upgrade --greedy
# fonts because no casks
if [ "$system_type" = "Linux" ]; then
  declare -a fonts=(
    FiraCode
    JetBrainsMono
  )
  version='2.3.3'
  fonts_dir="${HOME}/.local/share/fonts"
  if [[ ! -d "$fonts_dir" ]]; then
    mkdir -p "$fonts_dir"
  fi
  run_fc_cache=0
  for font in "${fonts[@]}"; do
    bookmark="${fonts_dir}/${font}_${version}.touch"
    if [ ! -f "${bookmark}" ]; then
      zip_file="${font}.zip"
      download_url="https://github.com/ryanoasis/nerd-fonts/releases/download/v${version}/${zip_file}"
      echo "Downloading $download_url"
      wget "$download_url"
      unzip "$zip_file" -d "$fonts_dir"
      rm "$zip_file"
      run_fc_cache=1
      touch "${bookmark}"
    fi
  done
  if [ "$run_fc_cache" = 1 ]; then
    find "$fonts_dir" -name '*Windows Compatible*' -delete
    fc-cache -fv
  fi
fi

# nvm
echo "Updating ${green}nvm${reset}"
if [ ! -d $HOME/.nvm ]; then
  PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash'
else 
  (
    cd "$NVM_DIR"
    git fetch --tags origin
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
  ) && \. "$NVM_DIR/nvm.sh"
fi
cp "$HOME"/misc/default-packages $HOME/.nvm/

# tmux
pull_repos ~/.tmux/plugins

# vim
echo "upgrading ${green}vim${reset}"
nvim --headless "+Lazy! sync" +qa

# set OSX config
if [ "$system_type" = "Darwin" ]; then
  defaults write com.apple.dock autohide-delay -float 0.05
  defaults write NSGlobalDomain "AppleShowAllExtensions" -bool "true"
  defaults write com.apple.finder "AppleShowAllFiles" -bool "True"
  defaults write com.apple.finder "ShowPathbar" -bool "true"
  defaults write com.apple.finder "_FXSortFoldersFirst" -bool "true"
fi
