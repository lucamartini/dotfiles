#!/usr/bin/env bash

# --- Environment Setup ---
set -euo pipefail

system_type=$(uname -s)

# Define colors
red=$(
  tput setaf 1
  tput bold
)
green=$(
  tput setaf 2
  tput bold
)
yellow=$(
  tput setaf 3
  tput bold
)
reset=$(tput sgr0)

# Directory config
ZSH_DIR="$HOME/.zsh"
REPO_DIR="$ZSH_DIR/repos"
mkdir -p "$REPO_DIR"

# --- Functions ---

clone_or_pull_repos() {
  local name="$1"
  local url="$2"

  echo -e "repo ${green}${name}${reset}"
  cd "$REPO_DIR" || return

  if [ -d "$name/.git" ]; then
    echo "pulling from $url"
    cd "$name" && git pull
  else
    echo "cloning from $url"
    git clone --depth=1 "$url" "$name"
  fi
}

pull_repos() {
  local base_dir="$1"
  echo -e "going to ${yellow}${base_dir}${reset}"

  cd "$base_dir" || return
  for dir in */; do
    local dir_name="${dir%/}"
    cd "$dir_name" || continue
    echo -e "pulling ${green}${dir_name}${reset}"
    git pull || echo "${red}Failed to pull $dir_name${reset}"
    cd ..
  done
}

# --- Ensure Zsh is Installed ---

if ! command -v zsh >/dev/null; then
  echo -e "${red}Zsh is not installed!${reset}"
  echo -e "${yellow}Run the following to set it as your shell:${reset}"
  echo "  chsh -s \$(which zsh)"
  echo -e "${red}Then log out and back in.${reset}"
  exit 1
fi

# --- Zsh Plugin Repositories ---

repos=(
  "dracula-syntax-highlighting:https://github.com/dracula/zsh-syntax-highlighting.git"
  "powerlevel10k:https://github.com/romkatv/powerlevel10k.git"
  "zsh-autosuggestions:https://github.com/zsh-users/zsh-autosuggestions"
  "zsh-syntax-highlighting:https://github.com/zsh-users/zsh-syntax-highlighting.git"
)

for entry in "${repos[@]}"; do
  IFS=':' read -r name url <<<"$entry"
  clone_or_pull_repos "$name" "$url"
done

# --- Homebrew ---

if ! command -v brew >/dev/null; then
  echo -e "Installing ${yellow}Homebrew${reset}..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

echo -e "Updating ${green}Homebrew bundle${reset}..."
if [ "$system_type" = "Darwin" ]; then
  [[ -x /opt/homebrew/bin/brew ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
elif [ "$system_type" = "Linux" ]; then
  [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

brew bundle install --global --verbose
brew upgrade --greedy

# --- Fonts (Linux Only) ---

if [ "$system_type" = "Linux" ]; then
  fonts_dir="${HOME}/.local/share/fonts"
  mkdir -p "$fonts_dir"

  version="2.3.3"
  fonts=("FiraCode")
  run_fc_cache=0

  for font in "${fonts[@]}"; do
    bookmark="${fonts_dir}/${font}_${version}.touch"
    if [ ! -f "$bookmark" ]; then
      zip_file="${font}.zip"
      url="https://github.com/ryanoasis/nerd-fonts/releases/download/v${version}/${zip_file}"
      echo "Downloading $url"
      wget "$url"
      unzip "$zip_file" -d "$fonts_dir"
      rm "$zip_file"
      touch "$bookmark"
      run_fc_cache=1
    fi
  done

  if ((run_fc_cache)); then
    find "$fonts_dir" -name '*Windows Compatible*' -delete
    fc-cache -fv
  fi
fi

# --- Tmux Plugins ---

pull_repos "$HOME/.tmux/plugins"

# --- Vim (Neovim) Lazy Sync ---

echo -e "Upgrading ${green}vim plugins${reset}..."
nvim --headless "+Lazy! sync" +qa

if [ "$system_type" = "Darwin" ]; then
  echo "Applying macOS defaults..."
  defaults write com.apple.dock autohide-delay -float 0.05
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  defaults write com.apple.finder AppleShowAllFiles -bool true
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder _FXSortFoldersFirst -bool true
  defaults write -g NSWindowShouldDragOnGesture -bool true
fi
